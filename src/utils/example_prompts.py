"""
Collection de prompts d'exemples pour tester les fonctionnalit√©s de visualisation.
Organis√©s par type de donn√©es et type de graphique.
"""

from typing import Dict, List, Tuple, Optional, Any
import json
import os

CUSTOM_PROMPTS_FILE = "custom_prompts.json"


class ExamplePrompts:
    """Collection de prompts d'exemples pour tester l'agent IA."""
    
    def __init__(self):
        """Initialise la collection de prompts (statique + personnalis√©s)."""
        self.prompts_by_category = self._build_prompts()
        self.custom_prompts_by_category: Dict[str, List[Tuple[str, str]]] = {}
        self.custom_metadata: Dict[str, Dict[str, Any]] = {}  # key: (category|title) -> metadata
        self._load_custom_prompts()

    # -------------------- Persistence --------------------
    def _load_custom_prompts(self) -> None:
        """Charge les prompts personnalis√©s depuis le fichier JSON."""
        if not os.path.exists(CUSTOM_PROMPTS_FILE):
            return
        try:
            with open(CUSTOM_PROMPTS_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
            self.custom_prompts_by_category = {
                cat: [(item['title'], item['prompt']) for item in items]
                for cat, items in data.get('prompts', {}).items()
            }
            self.custom_metadata = data.get('metadata', {})
        except (OSError, json.JSONDecodeError):
            # Fichier absent ou corrompu -> on ignore
            self.custom_prompts_by_category = {}
            self.custom_metadata = {}

    def _save_custom_prompts(self) -> None:
        """Sauvegarde les prompts personnalis√©s dans le fichier JSON."""
        try:
            serializable = {
                'prompts': {
                    cat: [
                        {
                            'title': title,
                            'prompt': prompt,
                            **(self.custom_metadata.get(f"{cat}|{title}") or {})
                        }
                        for title, prompt in items
                    ] for cat, items in self.custom_prompts_by_category.items()
                },
                'metadata': self.custom_metadata
            }
            with open(CUSTOM_PROMPTS_FILE, 'w', encoding='utf-8') as f:
                json.dump(serializable, f, ensure_ascii=False, indent=2)
        except OSError:
            # Ecriture impossible (permissions, etc.) -> on ignore
            pass

    # -------------------- Dynamic operations --------------------
    def add_prompt(self, category: str, prompt_title: str, prompt_text: str,
                   viz_type: Optional[str] = None,
                   columns: Optional[Dict[str, str]] = None) -> bool:
        """Ajoute un prompt personnalis√© et le persiste.

        Args:
            category: Cat√©gorie existante ou nouvelle
            prompt_title: Titre lisible
            prompt_text: Texte du prompt
            viz_type: Type de visualisation sugg√©r√© (optionnel)
            columns: Mapping de colonnes sugg√©r√© (optionnel)
        Returns:
            True si ajout√©
        """
        category = (category or "Autres").strip()
        new_title = (prompt_title or "").strip()
        body = (prompt_text or "").strip()
        if not new_title or not body:
            return False
        self.custom_prompts_by_category.setdefault(category, [])
        if any(t == new_title for t, _ in self.custom_prompts_by_category[category]):
            return False
        self.custom_prompts_by_category[category].append((new_title, body))
        meta_key = f"{category}|{new_title}"
        self.custom_metadata[meta_key] = {
            'viz_type': viz_type,
            'columns': columns or {}
        }
        self._save_custom_prompts()
        return True
    
    def _build_prompts(self) -> Dict[str, List[Tuple[str, str]]]:
        """
        Construit la collection de prompts organis√©e par cat√©gorie.
        
        Returns:
            Dictionnaire {cat√©gorie: [(titre, prompt), ...]}
        """
        return {
            "üìä Analyses de Ventes": [
                ("Vue d'ensemble des ventes", 
                 "Montre-moi un r√©sum√© g√©n√©ral des donn√©es de ventes"),
                ("Graphique des ventes par r√©gion", 
                 "Cr√©e un graphique en barres des ventes par r√©gion"),
                ("√âvolution du chiffre d'affaires", 
                 "Affiche l'√©volution du chiffre d'affaires dans le temps"),
                ("Top 5 des produits", 
                 "Quels sont les 5 produits les plus vendus ?"),
                ("Performance des vendeurs", 
                 "Compare les performances de chaque vendeur"),
                ("Analyse saisonni√®re", 
                 "Y a-t-il une saisonnalit√© dans les ventes ?"),
                ("Corr√©lation prix-quantit√©", 
                 "Montre la relation entre prix et quantit√© vendue")
            ],
            
            "üë• Analyses Clients": [
                ("Profil des clients", 
                 "Donne-moi un aper√ßu du profil de nos clients"),
                ("R√©partition par √¢ge", 
                 "Cr√©e un histogramme de la r√©partition par √¢ge"),
                ("Satisfaction par ville", 
                 "Compare la satisfaction client par ville"),
                ("Segmentation clients", 
                 "Segmente les clients selon leur valeur"),
                ("Relation √¢ge-salaire", 
                 "Montre la relation entre l'√¢ge et le salaire"),
                ("Clients les plus actifs", 
                 "Qui sont nos clients les plus actifs ?"),
                ("Analyse d√©mographique", 
                 "Analyse la r√©partition hommes/femmes par tranche d'√¢ge")
            ],
            
            "üí∞ Analyses Financi√®res": [
                ("Tableau de bord financier", 
                 "Cr√©e un tableau de bord des indicateurs financiers"),
                ("√âvolution des b√©n√©fices", 
                 "Montre l'√©volution des b√©n√©fices sur la p√©riode"),
                ("Analyse de la marge", 
                 "Comment √©volue notre marge b√©n√©ficiaire ?"),
                ("Comparaison trimestrielle", 
                 "Compare les performances par trimestre"),
                ("Tendance des co√ªts", 
                 "Analyse l'√©volution des co√ªts dans le temps"),
                ("Pr√©vision financi√®re", 
                 "Peux-tu identifier une tendance pour les prochains mois ?"),
                ("Ratio co√ªts/revenus", 
                 "Montre le ratio entre co√ªts et revenus")
            ],
            
            "üìã Analyses d'Enqu√™tes": [
                ("Satisfaction globale", 
                 "Quel est le niveau de satisfaction global ?"),
                ("Satisfaction par service", 
                 "Compare la satisfaction pour chaque service"),
                ("Analyse par tranche d'√¢ge", 
                 "La satisfaction varie-t-elle selon l'√¢ge ?"),
                ("Recommandations clients", 
                 "Quelle proportion de clients nous recommande ?"),
                ("Services √† am√©liorer", 
                 "Quels services ont besoin d'am√©lioration ?"),
                ("√âvolution temporelle", 
                 "Comment √©volue la satisfaction dans le temps ?"),
                ("Matrice satisfaction-recommandation", 
                 "Cr√©e une matrice satisfaction vs recommandation")
            ],
            
            "üîç Analyses Exploratoires": [
                ("Statistiques descriptives", 
                 "Donne-moi les statistiques descriptives principales"),
                ("D√©tection d'anomalies", 
                 "Y a-t-il des valeurs aberrantes dans les donn√©es ?"),
                ("Matrice de corr√©lation", 
                 "Montre les corr√©lations entre toutes les variables"),
                ("Distribution des variables", 
                 "Affiche la distribution de chaque variable num√©rique"),
                ("Analyse des valeurs manquantes", 
                 "Y a-t-il des donn√©es manquantes ?"),
                ("Patterns cach√©s", 
                 "Peux-tu identifier des patterns int√©ressants ?"),
                ("Clustering automatique", 
                 "Identifie des groupes naturels dans les donn√©es")
            ],
            
            "üìà Visualisations Avanc√©es": [
                ("Graphique en aires empil√©es", 
                 "Cr√©e un graphique en aires empil√©es du chiffre d'affaires par produit"),
                ("Heatmap des ventes", 
                 "Montre une heatmap des ventes par mois et r√©gion"),
                ("Graphique en radar", 
                 "Cr√©e un graphique radar des performances par vendeur"),
                ("Diagramme en violon", 
                 "Affiche la distribution des prix avec un violin plot"),
                ("Graphique de Sankey", 
                 "Montre le flux des ventes par r√©gion et produit"),
                ("Bubble chart", 
                 "Cr√©e un nuage de bulles avec 3 dimensions"),
                ("Timeline interactive", 
                 "Affiche une timeline des √©v√©nements importants")
            ]
        }
    
    def get_categories(self) -> List[str]:
        """Retourne la liste des cat√©gories disponibles."""
        # Fusionne cat√©gories statiques + custom
        categories = set(self.prompts_by_category.keys()) | set(self.custom_prompts_by_category.keys())
        return sorted(categories)
    
    def get_prompts_by_category(self, category: str) -> List[Tuple[str, str]]:
        """
        Retourne les prompts d'une cat√©gorie.
        
        Args:
            category: Nom de la cat√©gorie
            
        Returns:
            Liste de tuples (titre, prompt)
        """
        base = self.prompts_by_category.get(category, [])
        custom = self.custom_prompts_by_category.get(category, [])
        return base + custom
    
    def get_all_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne tous les prompts avec leur cat√©gorie.
        
        Returns:
            Liste de tuples (cat√©gorie, titre, prompt)
        """
        all_prompts = []
        # Inclure prompts dynamiques
        merged = self.get_categories()
        for category in merged:
            cat_prompts = self.get_prompts_by_category(category)
            for p_title, p_text in cat_prompts:
                all_prompts.append((category, p_title, p_text))
        return all_prompts
    
    def search_prompts(self, keyword: str) -> List[Tuple[str, str, str]]:
        """
        Recherche des prompts contenant un mot-cl√©.
        
        Args:
            keyword: Mot-cl√© √† rechercher
            
        Returns:
            Liste de tuples (cat√©gorie, titre, prompt) correspondants
        """
        results = []
        keyword_lower = keyword.lower()
        
        merged = self.get_categories()
        for category in merged:
            cat_prompts = self.get_prompts_by_category(category)
            for p_title, p_text in cat_prompts:
                if (keyword_lower in p_title.lower() or 
                    keyword_lower in p_text.lower() or 
                    keyword_lower in category.lower()):
                    results.append((category, p_title, p_text))
        
        return results
    
    def get_random_prompt(self) -> Tuple[str, str, str]:
        """
        Retourne un prompt al√©atoire.
        
        Returns:
            Tuple (cat√©gorie, titre, prompt)
        """
        import random
        all_prompts = self.get_all_prompts()
        return random.choice(all_prompts)
    
    def get_beginner_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne une s√©lection de prompts pour d√©butants.
        
        Returns:
            Liste de prompts simples et explicatifs
        """
        beginner_keywords = [
            "r√©sum√©", "aper√ßu", "montre", "affiche", "donne-moi",
            "vue d'ensemble", "profil", "tableau de bord"
        ]
        
        beginner_prompts = []
        for keyword in beginner_keywords:
            results = self.search_prompts(keyword)
            beginner_prompts.extend(results[:2])  # Max 2 par mot-cl√©
        
        # D√©duplication
        seen = set()
        unique_prompts = []
        for bp in beginner_prompts:
            if bp[2] not in seen:
                seen.add(bp[2])
                unique_prompts.append(bp)
        
        return unique_prompts[:10]  # Top 10
    
    def get_advanced_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne une s√©lection de prompts avanc√©s.
        
        Returns:
            Liste de prompts pour utilisateurs exp√©riment√©s
        """
        advanced_keywords = [
            "corr√©lation", "clustering", "anomalies", "patterns",
            "pr√©vision", "segmentation", "matrice", "tendance"
        ]
        
        advanced_prompts = []
        for keyword in advanced_keywords:
            results = self.search_prompts(keyword)
            advanced_prompts.extend(results)
        
        # D√©duplication et tri par complexit√©
        seen = set()
        unique_prompts = []
        for ap in advanced_prompts:
            if ap[2] not in seen:
                seen.add(ap[2])
                unique_prompts.append(ap)
        
        return unique_prompts

    # -------------------- Helpers dynamiques --------------------
    def is_custom(self, category: str, title: str) -> bool:
        """Indique si un prompt (cat√©gorie, titre) est personnalis√©."""
        return any(t == title for t, _ in self.custom_prompts_by_category.get(category, []))

    def get_metadata(self, category: str, title: str) -> Optional[Dict[str, Any]]:
        """Retourne les m√©tadonn√©es d'un prompt custom."""
        if not self.is_custom(category, title):
            return None
        return self.custom_metadata.get(f"{category}|{title}")

    def update_prompt(self, category: str, old_title: str, new_title: str,
                      new_text: str, viz_type: Optional[str] = None,
                      columns: Optional[Dict[str, Any]] = None) -> bool:
        """Met √† jour un prompt personnalis√©.

        R√®gles:
        - Uniquement pour prompts custom
        - Emp√™che les doublons de titre dans la m√™me cat√©gorie
        - Conserve m√©tadonn√©es si non fournies
        """
        if not self.is_custom(category, old_title):
            return False
        new_title = (new_title or "").strip()
        new_text = (new_text or "").strip()
        if not new_title or not new_text:
            return False
        prompts_list = self.custom_prompts_by_category.get(category, [])
        # V√©rifier doublon si titre chang√©
        if old_title != new_title and any(t == new_title for t, _ in prompts_list):
            return False
        # Mettre √† jour la liste
        for idx, (t, p) in enumerate(prompts_list):
            if t == old_title:
                prompts_list[idx] = (new_title, new_text)
                break
        # Mettre √† jour m√©tadonn√©es
        old_key = f"{category}|{old_title}"
        new_key = f"{category}|{new_title}"
        existing_meta = self.custom_metadata.get(old_key, {})
        updated_meta = existing_meta.copy()
        if viz_type is not None:
            updated_meta['viz_type'] = viz_type
        if columns is not None:
            updated_meta['columns'] = columns
        # Nettoyer anciennes cl√©s si titre chang√©
        if old_key != new_key and old_key in self.custom_metadata:
            del self.custom_metadata[old_key]
        self.custom_metadata[new_key] = updated_meta
        self._save_custom_prompts()
        return True

    def delete_prompt(self, category: str, title: str) -> bool:
        """Supprime un prompt personnalis√© et ses m√©tadonn√©es."""
        if not self.is_custom(category, title):
            return False
        prompts_list = self.custom_prompts_by_category.get(category, [])
        new_list = [(t, p) for t, p in prompts_list if t != title]
        self.custom_prompts_by_category[category] = new_list
        meta_key = f"{category}|{title}"
        if meta_key in self.custom_metadata:
            del self.custom_metadata[meta_key]
        # Retirer cat√©gorie si vide et non pr√©sente dans prompts statiques
        if not new_list and category not in self.prompts_by_category:
            del self.custom_prompts_by_category[category]
        self._save_custom_prompts()
        return True

    def validate_columns(self, dataframe, columns: Dict[str, str]) -> Dict[str, List[str]]:
        """Valide les colonnes propos√©es par rapport au DataFrame courant.

        Returns:
            dict avec keys: valid, invalid
        """
        if dataframe is None or not columns:
            return {"valid": [], "invalid": []}
        df_cols = set(dataframe.columns)
        used = set([c for c in columns.values() if c])
        valid = sorted([c for c in used if c in df_cols])
        invalid = sorted([c for c in used if c not in df_cols])
        return {"valid": valid, "invalid": invalid}

    def suggest_viz_type(self, dataframe, columns: Dict[str, str]) -> Tuple[str, str]:
        """Sugg√®re un type de visualisation √† partir du DataFrame et du mapping de colonnes.

        Heuristiques simples :
        - x & y num√©riques -> scatter
        - x date/datetime & y num√©rique -> line_chart
        - x cat√©gorielle & y num√©rique -> bar_chart
        - seulement y num√©rique -> histogram
        - mapping 'columns' (liste) > 2 num√©riques -> heatmap
        - y num√©rique seul -> boxplot (alternative)
        """
        try:
            if dataframe is None or not columns:
                return "", "Pas assez d'informations"
            import pandas as pd  # local import
            # Collecte
            x = columns.get('x')
            y = columns.get('y')
            cols_list = columns.get('columns') if isinstance(columns.get('columns'), list) else None
            # Heatmap candidate
            if cols_list:
                numeric = [c for c in cols_list if c in dataframe.columns and pd.api.types.is_numeric_dtype(dataframe[c])]
                if len(numeric) >= 3:
                    return "heatmap", "Plusieurs colonnes num√©riques pour corr√©lation"
            # x & y pr√©sents
            if x and y and x in dataframe.columns and y in dataframe.columns:
                x_dtype = dataframe[x].dtype
                y_dtype = dataframe[y].dtype
                if pd.api.types.is_datetime64_any_dtype(x_dtype):
                    if pd.api.types.is_numeric_dtype(y_dtype):
                        return "line_chart", "S√©rie temporelle d√©tect√©e (x temporel, y num√©rique)"
                if pd.api.types.is_numeric_dtype(x_dtype) and pd.api.types.is_numeric_dtype(y_dtype):
                    return "scatter", "Deux variables num√©riques (x,y)"
                if (not pd.api.types.is_numeric_dtype(x_dtype)) and pd.api.types.is_numeric_dtype(y_dtype):
                    return "bar_chart", "x cat√©goriel et y num√©rique"
            # Seulement y
            if y and y in dataframe.columns and pd.api.types.is_numeric_dtype(dataframe[y]):
                return "histogram", "Une seule variable num√©rique"
            # Dernier recours
            return "boxplot", "Fallback - distribution d'une variable"
        except Exception as e:  # pragma: no cover
            return "", f"Aucune suggestion ({e})"


if __name__ == "__main__":
    # Test des prompts
    prompts = ExamplePrompts()
    print("Cat√©gories disponibles:")
    for cat in prompts.get_categories():
        print(f"- {cat}")
    
    print(f"\nNombre total de prompts: {len(prompts.get_all_prompts())}")
    
    print("\nRecherche 'graphique':")
    for cat, title, prompt in prompts.search_prompts("graphique")[:3]:
        print(f"  [{cat}] {title}: {prompt}")