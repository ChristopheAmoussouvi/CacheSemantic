"""
Script pour compter le nombre de visualisations dans la base de donn√©es ChromaDB.
"""

import sys
import os

# Ajouter le chemin du projet
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def count_visualizations():
    """Compte les visualisations stock√©es dans ChromaDB."""
    
    print("=" * 70)
    print("üìä ANALYSE DE LA BASE DE DONN√âES CHROMADB")
    print("=" * 70)
    
    try:
        import chromadb
        from pathlib import Path
        
        # Chemin vers la base de donn√©es
        db_path = Path("./chroma_db")
        
        if not db_path.exists():
            print("\n‚ùå La base de donn√©es ChromaDB n'existe pas encore.")
            print(f"   Chemin recherch√©: {db_path.absolute()}")
            return
        
        print(f"\nüìÅ Base de donn√©es trouv√©e: {db_path.absolute()}")
        
        # Initialiser le client ChromaDB
        client = chromadb.PersistentClient(path=str(db_path))
        
        # Lister toutes les collections
        collections = client.list_collections()
        
        print(f"\nüìö Collections trouv√©es: {len(collections)}")
        print("-" * 70)
        
        total_documents = 0
        total_visualizations = 0
        
        for collection in collections:
            print(f"\nüóÇÔ∏è  Collection: '{collection.name}'")
            
            # R√©cup√©rer le nombre d'√©l√©ments
            count = collection.count()
            total_documents += count
            
            print(f"   üìÑ Nombre total de documents: {count}")
            
            if count > 0:
                # R√©cup√©rer un √©chantillon pour analyser les m√©tadonn√©es
                sample = collection.get(limit=min(5, count), include=['metadatas'])
                
                # Compter les visualisations
                viz_count = 0
                viz_types = set()
                
                if sample and 'metadatas' in sample:
                    for metadata in sample['metadatas']:
                        if metadata:
                            # V√©rifier si c'est une visualisation
                            if 'viz_type' in metadata or 'visualization' in metadata:
                                viz_count += 1
                                if 'viz_type' in metadata:
                                    viz_types.add(metadata['viz_type'])
                
                if viz_count > 0:
                    # Estimer le nombre total de visualisations
                    estimated_viz = int((viz_count / len(sample['metadatas'])) * count)
                    total_visualizations += estimated_viz
                    
                    print(f"   üìà Visualisations estim√©es: {estimated_viz}")
                    if viz_types:
                        print(f"   üé® Types trouv√©s dans l'√©chantillon: {', '.join(viz_types)}")
                else:
                    print(f"   ‚ÑπÔ∏è  Pas de visualisations d√©tect√©es dans l'√©chantillon")
                
                # Afficher quelques exemples de m√©tadonn√©es
                if sample and 'metadatas' in sample and sample['metadatas']:
                    print(f"\n   üìã Exemple de m√©tadonn√©es:")
                    first_meta = sample['metadatas'][0]
                    for key, value in list(first_meta.items())[:5]:
                        print(f"      ‚Ä¢ {key}: {value}")
        
        print("\n" + "=" * 70)
        print("üìä R√âSUM√â GLOBAL")
        print("=" * 70)
        print(f"   üìö Collections: {len(collections)}")
        print(f"   üìÑ Documents totaux: {total_documents}")
        print(f"   üìà Visualisations estim√©es: {total_visualizations}")
        
        # V√©rifier sp√©cifiquement la collection de Q&A
        print("\n" + "=" * 70)
        print("üîç RECHERCHE SP√âCIFIQUE - QUESTIONS/R√âPONSES AVEC VISUALISATIONS")
        print("=" * 70)
        
        for collection in collections:
            if 'qa' in collection.name.lower() or 'question' in collection.name.lower():
                print(f"\nüìä Analyse d√©taill√©e de '{collection.name}':")
                
                # R√©cup√©rer tous les documents
                all_docs = collection.get(include=['metadatas', 'documents'])
                
                if all_docs and 'metadatas' in all_docs:
                    viz_with_type = {}
                    questions_with_viz = 0
                    
                    for metadata in all_docs['metadatas']:
                        if metadata and 'viz_type' in metadata:
                            questions_with_viz += 1
                            viz_type = metadata['viz_type']
                            viz_with_type[viz_type] = viz_with_type.get(viz_type, 0) + 1
                    
                    print(f"\n   ‚úÖ Questions avec visualisations: {questions_with_viz}")
                    
                    if viz_with_type:
                        print(f"\n   üìä R√©partition par type de visualisation:")
                        for viz_type, count in sorted(viz_with_type.items(), key=lambda x: x[1], reverse=True):
                            percentage = (count / questions_with_viz) * 100
                            print(f"      ‚Ä¢ {viz_type}: {count} ({percentage:.1f}%)")
        
        print("\n" + "=" * 70)
        print("‚úÖ ANALYSE TERMIN√âE")
        print("=" * 70)
        
    except ImportError as e:
        print(f"\n‚ùå Erreur d'import: {e}")
        print("   Installez ChromaDB avec: pip install chromadb")
    except Exception as e:
        print(f"\n‚ùå Erreur lors de l'analyse: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    count_visualizations()
