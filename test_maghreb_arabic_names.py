"""
Test sp√©cifique pour les noms du Maghreb/arabes et les cas sans capitalisation.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from src.utils.enhanced_anonymizer import EnhancedDataAnonymizer, EnhancedAnonymizationConfig
    ENHANCED_AVAILABLE = True
except ImportError:
    ENHANCED_AVAILABLE = False
    print("‚ö†Ô∏è Module enhanced_anonymizer non disponible")

def test_maghreb_arabic_names():
    """Test sp√©cifique pour les noms du Maghreb et arabes."""
    
    print("üß™ TEST SP√âCIFIQUE - NOMS DU MAGHREB ET ARABES")
    print("=" * 60)
    
    # Noms du Maghreb et arabes avec diff√©rentes capitalisations
    test_names = [
        # Noms avec capitalisation correcte
        ("Mohamed Ben Ali", "Nom marocain classique"),
        ("Fatima Zahra", "Pr√©nom f√©minin arabe"),
        ("Ahmed El Mansouri", "Nom avec particule 'El'"),
        ("Khadija Benali", "Nom f√©minin avec 'Ben'"),
        ("Omar Ibn Khaldoun", "Nom avec 'Ibn'"),
        ("Aisha Al-Zahra", "Nom avec 'Al-'"),
        ("Youssef Ould Mohamed", "Nom mauritanien avec 'Ould'"),
        ("Leila Bint Rashid", "Nom avec 'Bint'"),
        
        # Noms SANS capitalisation (test critique)
        ("mohamed ben ali", "M√™me nom sans capitalisation"),
        ("fatima zahra", "Pr√©nom f√©minin sans capitalisation"),
        ("ahmed el mansouri", "Nom avec particule sans capitalisation"),
        ("khadija benali", "Nom f√©minin sans capitalisation"),
        ("omar ibn khaldoun", "Nom historique sans capitalisation"),
        ("aisha al-zahra", "Nom avec trait d'union sans capitalisation"),
        
        # Noms berb√®res/amazighs
        ("Tamazight Amellal", "Nom berb√®re"),
        ("Yemma Gouraya", "Nom kabyle"),
        ("tamazight amellal", "Nom berb√®re sans capitalisation"),
        
        # Noms compos√©s complexes
        ("Abd El Rahman", "Nom avec 'Abd'"),
        ("Sidi Mohamed", "Nom avec titre 'Sidi'"),
        ("abd el rahman", "Sans capitalisation"),
        ("sidi mohamed", "Sans capitalisation")
    ]
    
    if not ENHANCED_AVAILABLE:
        print("‚ùå Impossible de tester - module enhanced_anonymizer non disponible")
        return
    
    # Configuration pour mode strict
    config = EnhancedAnonymizationConfig(
        detect_uncommon_names=True,
        name_threshold_strict=0.9,
        name_threshold_loose=0.5,  # Plus permissif pour tester
        anonymization_mode="balanced"
    )
    
    anonymizer = EnhancedDataAnonymizer(config)
    
    print("üìä R√âSULTATS DE D√âTECTION:")
    print("-" * 50)
    
    capitalized_detected = 0
    lowercase_detected = 0
    total_capitalized = 0
    total_lowercase = 0
    
    for name, description in test_names:
        is_name, confidence, reasons = anonymizer.is_name_like_advanced(name)
        
        # Classifier selon la capitalisation
        has_capitals = any(c.isupper() for c in name)
        if has_capitals:
            total_capitalized += 1
            if is_name:
                capitalized_detected += 1
        else:
            total_lowercase += 1
            if is_name:
                lowercase_detected += 1
        
        # Affichage des r√©sultats
        status = "‚úÖ D√âTECT√â" if is_name else "‚ùå RAT√â"
        print(f"{status} '{name}' (conf: {confidence:.3f})")
        print(f"    üìù {description}")
        print(f"    üîç Raisons: {reasons[:3]}")
        print()
    
    print("=" * 60)
    print("üìà STATISTIQUES DE PERFORMANCE:")
    print("-" * 30)
    print(f"Noms avec capitalisation: {capitalized_detected}/{total_capitalized} ({capitalized_detected/total_capitalized*100:.1f}%)")
    print(f"Noms sans capitalisation: {lowercase_detected}/{total_lowercase} ({lowercase_detected/total_lowercase*100:.1f}%)")
    
    # Analyse des probl√®mes
    print("\nüîç ANALYSE DES LIMITATIONS ACTUELLES:")
    print("-" * 40)
    
    if lowercase_detected < total_lowercase:
        print("‚ùå PROBL√àME: D√©tection faible pour noms sans capitalisation")
        print("   ‚Üí L'analyse de capitalisation p√©nalise trop les minuscules")
        
    if capitalized_detected < total_capitalized * 0.8:
        print("‚ùå PROBL√àME: D√©tection insuffisante des noms arabes/maghr√©bins")
        print("   ‚Üí Patterns internationaux incomplets pour cette r√©gion")
    
    print("\nüí° AM√âLIORATIONS N√âCESSAIRES:")
    print("-" * 30)
    print("1. √âtendre les patterns internationaux pour le Maghreb/monde arabe")
    print("2. R√©duire le poids de la capitalisation dans le scoring")
    print("3. Ajouter un dictionnaire de noms arabes/berb√®res")
    print("4. Impl√©menter spaCy pour la reconnaissance d'entit√©s nomm√©es")
    print("5. Ajouter des patterns pour les particules arabes (Al-, El-, Ben-, etc.)")


def test_arabic_patterns():
    """Test des patterns sp√©cifiques aux noms arabes."""
    
    print("\nüïå TEST DES PATTERNS ARABES SP√âCIFIQUES")
    print("=" * 60)
    
    # Patterns pour d√©tecter les noms arabes
    arabic_patterns = {
        'prefix_al': r'\b(al|el)-[a-zA-Z√Ä-√ø]+\b',
        'prefix_abd': r'\babd\s+(al|el|allah|rahman|aziz)\b',
        'prefix_ben': r'\bben\s+[a-zA-Z√Ä-√ø]+\b',
        'prefix_ibn': r'\bibn\s+[a-zA-Z√Ä-√ø]+\b',
        'prefix_ould': r'\bould\s+[a-zA-Z√Ä-√ø]+\b',
        'prefix_bint': r'\bbint\s+[a-zA-Z√Ä-√ø]+\b',
        'prefix_sidi': r'\bsidi\s+[a-zA-Z√Ä-√ø]+\b'
    }
    
    test_cases = [
        "mohamed ben ali",
        "fatima al-zahra", 
        "abd el rahman",
        "omar ibn khaldoun",
        "youssef ould mohamed",
        "aisha bint rashid",
        "sidi mohamed"
    ]
    
    import re
    
    print("üîç Analyse des patterns:")
    for name in test_cases:
        matches = []
        for pattern_name, pattern in arabic_patterns.items():
            if re.search(pattern, name.lower()):
                matches.append(pattern_name)
        
        if matches:
            print(f"‚úÖ '{name}' ‚Üí Patterns: {matches}")
        else:
            print(f"‚ùå '{name}' ‚Üí Aucun pattern d√©tect√©")


if __name__ == "__main__":
    test_maghreb_arabic_names()
    test_arabic_patterns()