"""
Collection de prompts d'exemples pour tester les fonctionnalit√©s de visualisation.
Organis√©s par type de donn√©es et type de graphique.
"""

from typing import Dict, List, Tuple


class ExamplePrompts:
    """Collection de prompts d'exemples pour tester l'agent IA."""
    
    def __init__(self):
        """Initialise la collection de prompts."""
        self.prompts_by_category = self._build_prompts()
    
    def _build_prompts(self) -> Dict[str, List[Tuple[str, str]]]:
        """
        Construit la collection de prompts organis√©e par cat√©gorie.
        
        Returns:
            Dictionnaire {cat√©gorie: [(titre, prompt), ...]}
        """
        return {
            "üìä Analyses de Ventes": [
                ("Vue d'ensemble des ventes", 
                 "Montre-moi un r√©sum√© g√©n√©ral des donn√©es de ventes"),
                ("Graphique des ventes par r√©gion", 
                 "Cr√©e un graphique en barres des ventes par r√©gion"),
                ("√âvolution du chiffre d'affaires", 
                 "Affiche l'√©volution du chiffre d'affaires dans le temps"),
                ("Top 5 des produits", 
                 "Quels sont les 5 produits les plus vendus ?"),
                ("Performance des vendeurs", 
                 "Compare les performances de chaque vendeur"),
                ("Analyse saisonni√®re", 
                 "Y a-t-il une saisonnalit√© dans les ventes ?"),
                ("Corr√©lation prix-quantit√©", 
                 "Montre la relation entre prix et quantit√© vendue")
            ],
            
            "üë• Analyses Clients": [
                ("Profil des clients", 
                 "Donne-moi un aper√ßu du profil de nos clients"),
                ("R√©partition par √¢ge", 
                 "Cr√©e un histogramme de la r√©partition par √¢ge"),
                ("Satisfaction par ville", 
                 "Compare la satisfaction client par ville"),
                ("Segmentation clients", 
                 "Segmente les clients selon leur valeur"),
                ("Relation √¢ge-salaire", 
                 "Montre la relation entre l'√¢ge et le salaire"),
                ("Clients les plus actifs", 
                 "Qui sont nos clients les plus actifs ?"),
                ("Analyse d√©mographique", 
                 "Analyse la r√©partition hommes/femmes par tranche d'√¢ge")
            ],
            
            "üí∞ Analyses Financi√®res": [
                ("Tableau de bord financier", 
                 "Cr√©e un tableau de bord des indicateurs financiers"),
                ("√âvolution des b√©n√©fices", 
                 "Montre l'√©volution des b√©n√©fices sur la p√©riode"),
                ("Analyse de la marge", 
                 "Comment √©volue notre marge b√©n√©ficiaire ?"),
                ("Comparaison trimestrielle", 
                 "Compare les performances par trimestre"),
                ("Tendance des co√ªts", 
                 "Analyse l'√©volution des co√ªts dans le temps"),
                ("Pr√©vision financi√®re", 
                 "Peux-tu identifier une tendance pour les prochains mois ?"),
                ("Ratio co√ªts/revenus", 
                 "Montre le ratio entre co√ªts et revenus")
            ],
            
            "üìã Analyses d'Enqu√™tes": [
                ("Satisfaction globale", 
                 "Quel est le niveau de satisfaction global ?"),
                ("Satisfaction par service", 
                 "Compare la satisfaction pour chaque service"),
                ("Analyse par tranche d'√¢ge", 
                 "La satisfaction varie-t-elle selon l'√¢ge ?"),
                ("Recommandations clients", 
                 "Quelle proportion de clients nous recommande ?"),
                ("Services √† am√©liorer", 
                 "Quels services ont besoin d'am√©lioration ?"),
                ("√âvolution temporelle", 
                 "Comment √©volue la satisfaction dans le temps ?"),
                ("Matrice satisfaction-recommandation", 
                 "Cr√©e une matrice satisfaction vs recommandation")
            ],
            
            "üîç Analyses Exploratoires": [
                ("Statistiques descriptives", 
                 "Donne-moi les statistiques descriptives principales"),
                ("D√©tection d'anomalies", 
                 "Y a-t-il des valeurs aberrantes dans les donn√©es ?"),
                ("Matrice de corr√©lation", 
                 "Montre les corr√©lations entre toutes les variables"),
                ("Distribution des variables", 
                 "Affiche la distribution de chaque variable num√©rique"),
                ("Analyse des valeurs manquantes", 
                 "Y a-t-il des donn√©es manquantes ?"),
                ("Patterns cach√©s", 
                 "Peux-tu identifier des patterns int√©ressants ?"),
                ("Clustering automatique", 
                 "Identifie des groupes naturels dans les donn√©es")
            ],
            
            "üìà Visualisations Avanc√©es": [
                ("Graphique en aires empil√©es", 
                 "Cr√©e un graphique en aires empil√©es du chiffre d'affaires par produit"),
                ("Heatmap des ventes", 
                 "Montre une heatmap des ventes par mois et r√©gion"),
                ("Graphique en radar", 
                 "Cr√©e un graphique radar des performances par vendeur"),
                ("Diagramme en violon", 
                 "Affiche la distribution des prix avec un violin plot"),
                ("Graphique de Sankey", 
                 "Montre le flux des ventes par r√©gion et produit"),
                ("Bubble chart", 
                 "Cr√©e un nuage de bulles avec 3 dimensions"),
                ("Timeline interactive", 
                 "Affiche une timeline des √©v√©nements importants")
            ]
        }
    
    def get_categories(self) -> List[str]:
        """Retourne la liste des cat√©gories disponibles."""
        return list(self.prompts_by_category.keys())
    
    def get_prompts_by_category(self, category: str) -> List[Tuple[str, str]]:
        """
        Retourne les prompts d'une cat√©gorie.
        
        Args:
            category: Nom de la cat√©gorie
            
        Returns:
            Liste de tuples (titre, prompt)
        """
        return self.prompts_by_category.get(category, [])
    
    def get_all_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne tous les prompts avec leur cat√©gorie.
        
        Returns:
            Liste de tuples (cat√©gorie, titre, prompt)
        """
        all_prompts = []
        for category, prompts in self.prompts_by_category.items():
            for title, prompt in prompts:
                all_prompts.append((category, title, prompt))
        return all_prompts
    
    def search_prompts(self, keyword: str) -> List[Tuple[str, str, str]]:
        """
        Recherche des prompts contenant un mot-cl√©.
        
        Args:
            keyword: Mot-cl√© √† rechercher
            
        Returns:
            Liste de tuples (cat√©gorie, titre, prompt) correspondants
        """
        results = []
        keyword_lower = keyword.lower()
        
        for category, prompts in self.prompts_by_category.items():
            for title, prompt in prompts:
                if (keyword_lower in title.lower() or 
                    keyword_lower in prompt.lower() or 
                    keyword_lower in category.lower()):
                    results.append((category, title, prompt))
        
        return results
    
    def get_random_prompt(self) -> Tuple[str, str, str]:
        """
        Retourne un prompt al√©atoire.
        
        Returns:
            Tuple (cat√©gorie, titre, prompt)
        """
        import random
        all_prompts = self.get_all_prompts()
        return random.choice(all_prompts)
    
    def get_beginner_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne une s√©lection de prompts pour d√©butants.
        
        Returns:
            Liste de prompts simples et explicatifs
        """
        beginner_keywords = [
            "r√©sum√©", "aper√ßu", "montre", "affiche", "donne-moi",
            "vue d'ensemble", "profil", "tableau de bord"
        ]
        
        beginner_prompts = []
        for keyword in beginner_keywords:
            results = self.search_prompts(keyword)
            beginner_prompts.extend(results[:2])  # Max 2 par mot-cl√©
        
        # D√©duplication
        seen = set()
        unique_prompts = []
        for prompt in beginner_prompts:
            if prompt[2] not in seen:
                seen.add(prompt[2])
                unique_prompts.append(prompt)
        
        return unique_prompts[:10]  # Top 10
    
    def get_advanced_prompts(self) -> List[Tuple[str, str, str]]:
        """
        Retourne une s√©lection de prompts avanc√©s.
        
        Returns:
            Liste de prompts pour utilisateurs exp√©riment√©s
        """
        advanced_keywords = [
            "corr√©lation", "clustering", "anomalies", "patterns",
            "pr√©vision", "segmentation", "matrice", "tendance"
        ]
        
        advanced_prompts = []
        for keyword in advanced_keywords:
            results = self.search_prompts(keyword)
            advanced_prompts.extend(results)
        
        # D√©duplication et tri par complexit√©
        seen = set()
        unique_prompts = []
        for prompt in advanced_prompts:
            if prompt[2] not in seen:
                seen.add(prompt[2])
                unique_prompts.append(prompt)
        
        return unique_prompts


if __name__ == "__main__":
    # Test des prompts
    prompts = ExamplePrompts()
    print("Cat√©gories disponibles:")
    for cat in prompts.get_categories():
        print(f"- {cat}")
    
    print(f"\nNombre total de prompts: {len(prompts.get_all_prompts())}")
    
    print("\nRecherche 'graphique':")
    for cat, title, prompt in prompts.search_prompts("graphique")[:3]:
        print(f"  [{cat}] {title}: {prompt}")