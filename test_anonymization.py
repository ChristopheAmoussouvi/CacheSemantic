#!/usr/bin/env python3
"""
Script de test pour le module d'anonymisation des donn√©es.
Teste les fonctionnalit√©s de d√©tection et de traitement des donn√©es sensibles.
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime

# Ajouter le r√©pertoire src au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

def test_anonymization():
    """Test complet du module d'anonymisation."""
    print("üõ°Ô∏è Test du module d'anonymisation des donn√©es")
    print("=" * 60)

    try:
        # Importer le module d'anonymisation
        from utils.anonymizer import DataAnonymizer, AnonymizationConfig

        print("‚úÖ Module d'anonymisation import√© avec succ√®s")

        # Cr√©er des donn√©es de test avec des informations sensibles
        print("\nüìä Cr√©ation de donn√©es de test avec informations sensibles...")

        test_data = pd.DataFrame({
            'client_id': ['C001', 'C002', 'C003', 'C004', 'C005'],
            'nom_complet': ['Marie Martin', 'Jean Dupont', 'Sophie Bernard', 'Pierre Durand', 'Emma Moreau'],
            'prenom': ['Marie', 'Jean', 'Sophie', 'Pierre', 'Emma'],
            'nom': ['Martin', 'Dupont', 'Bernard', 'Durand', 'Moreau'],
            'email': ['marie@email.com', 'jean@email.com', 'sophie@email.com', 'pierre@email.com', 'emma@email.com'],
            'telephone': ['0123456789', '0987654321', '0112233445', '0667788990', '0778899001'],
            'numero_compte': ['FR1420041010050500013M02606', '123456789012', '987654321098', 'FR7630001007941234567890185', '112233445566'],
            'commentaire_client': [
                'Client tr√®s satisfait du service. A contact√© marie@email.com pour plus d\'informations.',
                'Probl√®me r√©solu rapidement par t√©l√©phone au 0123456789',
                'Merci pour l\'aide apport√©e. Mon num√©ro de compte est FR1420041010050500013M02606',
                'Service excellent, je recommande vivement',
                'Besoin d\'aide pour mon compte 123456789012'
            ],
            'montant_transaction': [150.50, 230.75, 89.90, 1200.00, 45.30],
            'date_transaction': ['2024-01-15', '2024-01-16', '2024-01-17', '2024-01-18', '2024-01-19'],
            'code_postal': ['75001', '69001', '13001', '31000', '44000'],
            'ville': ['Paris', 'Lyon', 'Marseille', 'Toulouse', 'Nantes']
        })

        print("Donn√©es originales:")
        print(test_data.to_string())
        print(f"\nüìã {len(test_data)} lignes, {len(test_data.columns)} colonnes")

        # Test 1: Analyse d'anonymisation (aper√ßu)
        print("\nüîç Test 1: Analyse d'anonymisation (aper√ßu)")
        print("-" * 50)

        anonymizer = DataAnonymizer()
        preview = anonymizer.preview_anonymization(test_data)

        print("Colonnes de noms d√©tect√©es:")
        print(f"  {preview['name_columns']}")
        print("Colonnes de comptes d√©tect√©es:")
        print(f"  {preview['account_columns']}")
        print("Colonnes de texte √† traiter:")
        print(f"  {list(preview['text_columns_to_process'].keys())}")
        print("Total colonnes √† supprimer:")
        print(f"  {preview['total_columns_to_remove']}")
        print("Colonnes restantes:")
        print(f"  {preview['remaining_columns']}")

        # Test 2: Anonymisation compl√®te
        print("\nüîß Test 2: Anonymisation compl√®te")
        print("-" * 50)

        df_anonymized, report = anonymizer.anonymize_dataframe(test_data)

        print("Donn√©es apr√®s anonymisation:")
        print(df_anonymized.to_string())
        print()

        print("Rapport d'anonymisation:")
        print(f"  Colonnes supprim√©es: {report.columns_removed}")
        print(f"  Colonnes restantes: {report.total_columns_processed}")
        print(f"  Lignes trait√©es: {report.total_rows_processed}")

        # Test 3: Configuration personnalis√©e
        print("\n‚öôÔ∏è Test 3: Configuration personnalis√©e")
        print("-" * 50)

        custom_config = AnonymizationConfig(
            name_threshold=0.6,  # Seuil plus bas pour d√©tecter plus de colonnes
            min_name_length=1,
            account_patterns=[
                r'\b\d{5,}\b',  # Num√©ros plus courts
                r'\b[A-Z]{2}\d+\b',  # IBAN
            ]
        )

        custom_anonymizer = DataAnonymizer(custom_config)
        preview_custom = custom_anonymizer.preview_anonymization(test_data)

        print("Configuration personnalis√©e:")
        print(f"  Seuil de noms: {custom_config.name_threshold}")
        print(f"  Longueur min nom: {custom_config.min_name_length}")
        print(f"  Patterns de comptes: {len(custom_config.account_patterns)}")

        print("R√©sultats avec configuration personnalis√©e:")
        print(f"  Colonnes de noms: {preview_custom['name_columns']}")
        print(f"  Colonnes de comptes: {preview_custom['account_columns']}")

        # Test 4: Test avec des donn√©es plus r√©alistes
        print("\nüìä Test 4: Donn√©es plus r√©alistes")
        print("-" * 50)

        # Cr√©er un dataset plus r√©aliste avec des pr√©noms/noms m√©lang√©s
        realistic_data = pd.DataFrame({
            'id': range(1, 101),
            'client': ['Client_' + str(i) for i in range(1, 101)],
            'nom_prenom': [
                'Martin Jean', 'Bernard Marie', 'Dupont Pierre', 'Petit Sophie', 'Robert Paul',
                'Richard Anne', 'Moreau Michel', 'Simon Claire', 'Laurent Emma', 'Lefebvre Lucas'
            ] * 10,
            'email_client': [f'client{i}@exemple.fr' for i in range(1, 101)],
            'telephone_portable': [f'0{i//10}{i%10}{j:02d}{k:02d}{l:02d}{m:02d}' for i in range(10) for j in range(10) for k in range(10) for l in range(10) for m in range(10)][:100],
            'numero_client': [f'C{i:06d}' for i in range(1, 101)],
            'commentaire': [
                f'Client {i} tr√®s satisfait. Contact: client{i}@exemple.fr, Tel: 0{i//10}{i%10}123456'
                for i in range(1, 101)
            ],
            'montant_achat': np.random.exponential(100, 100),
            'date_achat': pd.date_range('2024-01-01', periods=100, freq='D').strftime('%Y-%m-%d').tolist()
        })

        print(f"Dataset r√©aliste: {len(realistic_data)} lignes, {len(realistic_data.columns)} colonnes")

        preview_realistic = anonymizer.preview_anonymization(realistic_data)
        print("Analyse du dataset r√©aliste:")
        print(f"  Colonnes de noms: {preview_realistic['name_columns']}")
        print(f"  Colonnes de comptes: {preview_realistic['account_columns']}")
        print(f"  Colonnes de texte: {list(preview_realistic['text_columns_to_process'].keys())}")

        # Test 5: Test de sauvegarde de fichier anonymis√©
        print("\nüíæ Test 5: Sauvegarde de fichier anonymis√©")
        print("-" * 50)

        # Cr√©er un fichier CSV temporaire
        temp_file = "temp_test_data.csv"
        test_data.to_csv(temp_file, index=False)

        # Anonymiser et sauvegarder
        from utils.anonymizer import anonymize_csv_file

        output_file = "temp_test_data_anonymized.csv"
        success, message = anonymize_csv_file(temp_file, output_file)

        if success:
            print("‚úÖ Fichier anonymis√© sauvegard√© avec succ√®s")
            print(f"üìÅ Fichier de sortie: {output_file}")

            # Afficher un aper√ßu du fichier anonymis√©
            df_result = pd.read_csv(output_file)
            print("Aper√ßu du fichier anonymis√©:")
            print(df_result.head(3).to_string())
        else:
            print(f"‚ùå Erreur lors de la sauvegarde: {message}")

        # Nettoyer les fichiers temporaires
        try:
            os.remove(temp_file)
            os.remove(output_file)
            print("üóëÔ∏è Fichiers temporaires supprim√©s")
        except:
            pass

        print("\nüéâ Tous les tests d'anonymisation ont r√©ussi!")
        print("\nüìã R√©sum√© des fonctionnalit√©s impl√©ment√©es:")
        print("  ‚úÖ D√©tection automatique des colonnes de noms")
        print("  ‚úÖ D√©tection des num√©ros de compte et donn√©es financi√®res")
        print("  ‚úÖ Traitement des colonnes de commentaires")
        print("  ‚úÖ Configuration personnalisable")
        print("  ‚úÖ Rapports d√©taill√©s d'anonymisation")
        print("  ‚úÖ Sauvegarde de fichiers anonymis√©s")
        print("  ‚úÖ Int√©gration avec DataManager")

        return True

    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° Assurez-vous que le module anonymizer est disponible")
        return False

    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
        print(f"üìç Type d'erreur: {type(e).__name__}")
        return False

def demonstrate_anonymization_workflow():
    """D√©montre le workflow complet d'anonymisation."""
    print("\nüîÑ D√©monstration du workflow d'anonymisation")
    print("=" * 60)

    try:
        from utils.anonymizer import DataAnonymizer, AnonymizationConfig

        # 1. Cr√©er des donn√©es avec des informations sensibles
        print("1Ô∏è‚É£ Cr√©ation de donn√©es sensibles...")
        sensitive_data = pd.DataFrame({
            'id_client': ['ID_' + str(i) for i in range(1, 6)],
            'nom_client': ['Dubois Jean', 'Martin Sophie', 'Bernard Pierre', 'Petit Marie', 'Moreau Paul'],
            'email_client': ['jean.dubois@email.com', 'sophie.martin@email.com', 'pierre.bernard@email.com',
                           'marie.petit@email.com', 'paul.moreau@email.com'],
            'telephone_client': ['0102030405', '0607080910', '0506070809', '0304050607', '0708091011'],
            'numero_compte_bancaire': ['FR7630001007941234567890185', 'FR1420041010050500013M02606',
                                     'FR0912345678901234567890123', 'FR4530003000509876543210123', 'FR6789012345678901234567890'],
            'commentaire': [
                'Tr√®s satisfait du service client. Contact√© par email jean.dubois@email.com et t√©l√©phone 0102030405',
                'Service excellent, je recommande. Mon compte est FR7630001007941234567890185',
                'Besoin d\'aide pour mon compte bancaire FR1420041010050500013M02606',
                'Merci pour l\'aide apport√©e au 0607080910',
                'Probl√®me r√©solu, contact sophie.martin@email.com'
            ],
            'montant_achat': [125.50, 89.90, 234.75, 156.30, 78.45],
            'date_achat': pd.date_range('2024-01-01', periods=5).strftime('%Y-%m-%d').tolist()
        })

        print("Donn√©es sensibles cr√©√©es:")
        print(sensitive_data.to_string())
        print()

        # 2. Analyser les risques
        print("2Ô∏è‚É£ Analyse des risques d'anonymisation...")
        anonymizer = DataAnonymizer()
        preview = anonymizer.preview_anonymization(sensitive_data)

        print("Risques identifi√©s:")
        print(f"  üìõ Colonnes de noms: {preview['name_columns']}")
        print(f"  üí≥ Colonnes de comptes: {preview['account_columns']}")
        print(f"  üìù Colonnes de texte: {list(preview['text_columns_to_process'].keys())}")
        print()

        # 3. Appliquer l'anonymisation
        print("3Ô∏è‚É£ Application de l'anonymisation...")
        df_anonymized, report = anonymizer.anonymize_dataframe(sensitive_data)

        print("Donn√©es apr√®s anonymisation:")
        print(df_anonymized.to_string())
        print()

        # 4. Afficher le rapport
        print("4Ô∏è‚É£ Rapport d'anonymisation:")
        print(f"  ‚úÖ Colonnes supprim√©es: {len(report.columns_removed)}")
        print(f"     {report.columns_removed}")
        print(f"  üìä Colonnes restantes: {report.total_columns_processed}")
        print(f"  üìà Lignes trait√©es: {report.total_rows_processed}")
        print()

        # 5. V√©rifier l'efficacit√©
        print("5Ô∏è‚É£ V√©rification de l'efficacit√©...")
        print("Donn√©es sensibles supprim√©es:")
        sensitive_columns = ['nom_client', 'email_client', 'telephone_client', 'numero_compte_bancaire']
        for col in sensitive_columns:
            if col in sensitive_data.columns and col not in df_anonymized.columns:
                print(f"  ‚úÖ {col}: Supprim√©e")

        print("Donn√©es sensibles dans les commentaires:")
        if 'commentaire' in df_anonymized.columns:
            sample_comments = df_anonymized['commentaire'].head(2).tolist()
            print("  üìù Commentaires anonymis√©s:")
            for i, comment in enumerate(sample_comments, 1):
                print(f"     {i}: {comment}")

        print("\nüéØ Anonymisation r√©ussie!")
        print("‚úÖ Toutes les informations sensibles ont √©t√© trait√©es")
        print("‚úÖ Les donn√©es conservent leur utilit√© pour l'analyse")
        print("‚úÖ Rapport d√©taill√© g√©n√©r√©")

        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©monstration: {e}")
        return False

if __name__ == "__main__":
    print("üõ°Ô∏è Test complet du syst√®me d'anonymisation des donn√©es")
    print("=" * 70)

    # Test de base
    test_success = test_anonymization()

    if test_success:
        print("\n" + "=" * 70)
        # D√©monstration du workflow
        workflow_success = demonstrate_anonymization_workflow()

        if workflow_success:
            print("\n" + "üåü" * 30)
            print("üéâ TOUS LES TESTS R√âUSSIS!")
            print("Le syst√®me d'anonymisation est pr√™t pour la production!")
            print("üåü" * 30)
        else:
            print("\n‚ùå La d√©monstration du workflow a √©chou√©")
            sys.exit(1)
    else:
        print("\n‚ùå Les tests de base ont √©chou√©")
        sys.exit(1)
